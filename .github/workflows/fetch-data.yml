# Berlin Wastewater Dashboard
# Copyright (c) 2025 Alexandra von Criegern
# Licensed under the ISC License.

name: Fetch new data

on:
  schedule:
    - cron: "0 6 * * *" # Runs daily at 06:00 UTC
  workflow_dispatch:

jobs:
  fetch-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.10.0

      - name: Install dependencies
        run: npm ci

      - name: Run fetch script
        run: node scripts/fetchLiveData.js

      - name: Validate fetched data
        run: node tests/validate/validateForChart.js

      - name: Build site
        run: npm run build

      - name: Serve built site locally
        run: npx serve dist -l 4173 &

      - name: Wait for preview server to be ready
        run: npx wait-on http://localhost:4173

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run UI tests with Playwright
        run: npm run test:chart

      - name: Commit and push updated data
        env:
          GH_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
        run: |
          DATA_FILE="public/data/data.json"

          git config user.name "Alexandra von Criegern"
          git config user.email "plutonik@gmx.net"

          # Set remote URL with token
          git remote set-url origin "https://x-access-token:$GH_TOKEN@github.com/${{ github.repository }}.git"


          # Check if there are any changes to our target file
          if git diff --quiet HEAD $DATA_FILE; then
            echo "No changes in $DATA_FILE - workflow completed successfully"
            exit 0
          fi

          echo "Changes detected in $DATA_FILE"
          git add $DATA_FILE

          # Double-check that something is staged
          if git diff --cached --quiet; then
            echo "No staged changes after add - nothing to commit"
            exit 0
          fi

          # Commit changes
          git commit -m "chore(data): automated update from latest API fetch"

          if git push origin HEAD:main; then
            echo "Successfully pushed changes"
          else
            echo "Push failed - fetching latest and retrying"
            git fetch origin main

            if git rebase origin/main; then
              git push origin HEAD:main
            else
              git rebase --abort || true
              git merge origin/main -m "GHA: merge before retry"
              git push origin HEAD:main
            fi
          fi
