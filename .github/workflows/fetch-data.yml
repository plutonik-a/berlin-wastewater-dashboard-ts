# Berlin Wastewater Dashboard
# Copyright (c) 2025 Alexandra von Criegern
# Licensed under the ISC License.

name: Fetch new data

on:
  schedule:
    - cron: "0 6 * * *" # Runs daily at 06:00 UTC
  workflow_dispatch:

jobs:
  fetch-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.10.0

      - name: Install dependencies
        run: npm ci

      - name: Run fetch script
        run: node scripts/fetchLiveData.js

      - name: Validate fetched data
        run: node tests/validate/validateForChart.js

      - name: Build site
        run: npm run build

      - name: Serve built site locally
        run: npx serve dist -l 4173 &

      - name: Wait for preview server to be ready
        run: npx wait-on http://localhost:4173

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run UI tests with Playwright
        run: npm run test:chart

      - name: Commit and push updated data
        env:
          GH_TOKEN: ${{ secrets.GH_PUSH_TOKEN }}
        run: |
          DATA_FILE="public/data/data.json"

          git config user.name "Alexandra von Criegern"
          git config user.email "plutonik@gmx.net"
          git remote set-url origin "https://x-access-token:$GH_TOKEN@github.com/${{ github.repository }}.git"

          echo "=== Checking current repository state ==="
          git status --porcelain

          echo "=== Ensuring we're on main branch ==="
          git checkout main

          echo "=== Fetching latest changes from remote ==="
          git fetch origin main

          echo "=== Stashing any local changes ==="
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "Local changes detected - stashing them"
            git stash push --include-untracked -m "GHA: temporary stash $(date)"
            STASH_CREATED=true
          else
            echo "No local changes to stash"
            STASH_CREATED=false
          fi

          echo "=== Resetting to latest remote state ==="
          git reset --hard origin/main

          if [ "$STASH_CREATED" = true ]; then
            echo "=== Restoring stashed changes ==="
            if git stash pop; then
              echo "Stash successfully restored"
            else
              echo "Stash restore failed - handling conflicts"
              git checkout --theirs $DATA_FILE || true
              git add $DATA_FILE || true
              git stash drop || true
            fi
          fi

          echo "=== Checking for changes in target file ==="
          if git diff --quiet HEAD $DATA_FILE; then
            echo "No changes in $DATA_FILE - workflow completed successfully"
            exit 0
          fi

          echo "Changes detected in $DATA_FILE"
          git diff --stat HEAD $DATA_FILE

          echo "=== Staging and committing changes ==="
          git add $DATA_FILE

          if git diff --cached --quiet; then
            echo "No staged changes after add - nothing to commit"
            exit 0
          fi

          COMMIT_MSG="chore(data): update from latest API fetch"
          git commit -m "$COMMIT_MSG"

          echo "=== Pushing changes to remote ==="
          MAX_RETRIES=3
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push origin HEAD:main; then
              echo "Successfully pushed changes to remote"
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "Push failed (attempt $RETRY_COUNT/$MAX_RETRIES)"
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "=== Retrying after fetching latest changes ==="
                git fetch origin main
                
                if git rebase origin/main; then
                  echo "Rebase successful, retrying push"
                else
                  echo "Rebase failed, using merge strategy"
                  git rebase --abort || true
                  git merge origin/main -m "GHA: merge latest changes before retry"
                fi
                
                sleep 2
              else
                echo "All push attempts failed"
                exit 1
              fi
            fi
          done
